import 'dart:io';import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:dotted_border/dotted_border.dart';import 'package:driver/firebase/controller/authController.dart';import 'package:driver/firebase/controller/image_controller.dart';import 'package:driver/firebase/controller/restaturen_controller.dart';import 'package:driver/utilitys/colors.dart';import 'package:driver/widgets/appButton.dart';import 'package:driver/widgets/app_inputs.dart';import 'package:driver/widgets/app_networkimages.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/material.dart';import 'package:image_picker/image_picker.dart';import '../google_map/seach_place.dart';class CreateRestaurent extends StatefulWidget {  final QueryDocumentSnapshot<Map<String, dynamic>>? restaurent;  const CreateRestaurent({Key? key, this.restaurent}) : super(key: key);  @override  State<CreateRestaurent> createState() => _CreateRestaurentState();}class _CreateRestaurentState extends State<CreateRestaurent> {  final _formKey = GlobalKey<FormState>();  final _name = TextEditingController();  final _email = TextEditingController();  final _phone = TextEditingController();  final _pass = TextEditingController();  final _location = TextEditingController();  var restaurentLocation;  bool _isLoading= false;  //if the restaurent is not null then we will set the value to the controller  @override  void initState() {    // TODO: implement initState    super.initState();    if(widget.restaurent != null){      setState(() {        _name.text = widget.restaurent!.data()["name"];        _email.text = widget.restaurent!.data()["email"];        _phone.text = widget.restaurent!.data()["phone"];        _location.text = widget.restaurent!.data()["location"]["address"];        _pass.text = widget.restaurent!.data()["password"];        restaurentLocation = {          "latitude": widget.restaurent!.data()["location"]["latitude"],          "longitude": widget.restaurent!.data()["location"]["longitude"],          "address" : widget.restaurent!.data()["location"]["address"]        };      });    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: AppColors.bgColor,      appBar: AppBar(        backgroundColor: AppColors.bgColor,        leading: IconButton(          onPressed: ()=>Navigator.pop(context),          icon: Icon(Icons.arrow_back, color: Colors.black,),        ),        title: Text("Create Restaurent",style: TextStyle(fontWeight: FontWeight.w600, color: Colors.black),),      ),      body: SingleChildScrollView(        padding: EdgeInsets.all(15),        child: Form(          key: _formKey,          child: Column(            mainAxisAlignment: MainAxisAlignment.start,           crossAxisAlignment: CrossAxisAlignment.start,           children: [             AppInput(                 prefixIcon: Icon(Icons.search,color: Colors.grey,),                 title: "Restaurant Name",                 hintText: "Restaurant Name", controller: _name,                  validator: (value){                    if(value!.isEmpty){                      return "Please enter restaurant name";                    }                    return null;                  }             ),             SizedBox(height: 15,),            widget.restaurent != null ?Center() :  AppInput(                 prefixIcon: Icon(Icons.search,color: Colors.grey,),                 hintText: "Email", controller: _email,                 title:  "Email",                 validator: (value){                   if(value!.isEmpty){                     return "Please enter email";                   }                   return null;                 }             ),             SizedBox(height: 15,),             AppInput(                 prefixIcon: Icon(Icons.search,color: Colors.grey,),                 hintText: "Phone Number", controller: _phone,                 title: "Phone Number",                 validator: (value){                   if(value!.isEmpty){                     return "Please enter Phone Number";                   }                   return null;                 }             ),             SizedBox(height: 15,),             widget.restaurent != null ?Center() :   AppInput(                 prefixIcon: Icon(Icons.search,color: Colors.grey,),                 hintText: "Password", controller: _pass,                 title: "Password",                 validator: (value){                   if(value!.isEmpty){                     return "Please enter password";                   }                   return null;                 }             ),             SizedBox(height: 15,),             AppInput(               readOnly: true,                 onTap: ()async{                   _navigateAndDisplaySelection(context);                 },                 prefixIcon: Icon(Icons.search,color: Colors.grey,),                 hintText: "Restaurant Location", controller: _location,                 title:  "Restaurant Location",                 validator: (value){                   if(value!.isEmpty){                     return "Please enter email";                   }                   return null;                 }             ),             SizedBox(height: 15,),             Text("Logo Image",              style: TextStyle(                fontSize: 17,                fontWeight: FontWeight.w600,                color: Colors.black              ),             ),             SizedBox(height: 10,),             InkWell(                 onTap: ()=>_showBottomSheet(),                 child: DottedBorder(               borderType: BorderType.RRect,               radius: Radius.circular(12),               padding: EdgeInsets.all(6),               child: ClipRRect(                 borderRadius: BorderRadius.all(Radius.circular(12)),                 child: Container(                   height: 140,                   width: MediaQuery.of(context).size.width*0.45,                   color: Colors.white,                   child:  _image != null  ? Center(                     child:  Image.file(_image!,)                   ) : widget!.restaurent != null ? widget.restaurent!["image"] != null                       ? AppNetworkImage(imageUrl: widget.restaurent!["image"], height: 140, width:  MediaQuery.of(context).size.width*0.45,)                  : Icon(Icons.add_a_photo_outlined, color: Colors.grey, size: 40,) : Icon(Icons.add_a_photo_outlined, color: Colors.grey, size: 40,)               ),               ),             )),             SizedBox(height: 30,),             AppButton(text: "${widget!.restaurent == null ? "Create New" : "Edite"}",               onClick: ()=>widget!.restaurent == null ? _addRestaturant() : _editRestaurent(), width: 200, height: 60, isLoading: _isLoading,)           ]          ),        ),      ),    );  }  // A method that launches the SelectionScreen and awaits the result from// Navigator.pop.  Future<void> _navigateAndDisplaySelection(BuildContext context) async {    // Navigator.push returns a Future that completes after calling    // Navigator.pop on the Selection Screen.    final result = await Navigator.push(      context,      MaterialPageRoute(builder: (context) => const SearchPlace()),    );    // When a BuildContext is used from a StatefulWidget, the mounted property    // must be checked after an asynchronous gap.    if (!context.mounted) return;    setState(() {      print("result === $result");      _location.text      =      "${result["location"]["location"]["quarter"]},""${result["location"]["location"]["city"]}, ${result["location"]["location"]["country"]}, ${result["location"]["location"]["suburb"]}, ${result["location"]["location"]["country"]}, ${result["location"]["location"]["state_district"]}, ${result["location"]["location"]["country"]}";      restaurentLocation = {        "latitude": result["location"]["lat"],        "longitude": result["location"]["lng"],        "address": "${result["location"]["location"]["quarter"]}, ${result["location"]["location"]["city"]}, ${result["location"]["location"]["country"]}, ${result["location"]["location"]["suburb"]}, ${result["location"]["location"]["country"]}, ${result["location"]["location"]["state_district"]}, ${result["location"]["location"]["country"]}",      };    });  }  //show bottom sheet  _showBottomSheet() {    return showModalBottomSheet(        context: context,        builder: (context) {          return Padding(            padding: const EdgeInsets.all(20.0),            child: Column(              mainAxisSize: MainAxisSize.min,              mainAxisAlignment: MainAxisAlignment.start,              crossAxisAlignment: CrossAxisAlignment.start,              children: <Widget>[                SizedBox(height: 20,),                Text("Choose Photo",                  style: TextStyle(                    fontWeight: FontWeight.w600,                    fontSize: 20,                  ),                ),                SizedBox(height: 20,),                ListTile(                  leading: new Icon(Icons.camera_alt_outlined),                  title: new Text('Camera'),                  onTap: () {                    _takeImage(ImageSource.camera);                    Navigator.pop(context);                  },                ),                ListTile(                  leading: new Icon(Icons.photo_camera_back),                  title: new Text('Gallery'),                  onTap: () {                    _takeImage(ImageSource.gallery);                    Navigator.pop(context);                  },                ),              ],            ),          );        });  }  //take image  File? _image;  _takeImage(ImageSource source) async {    final picker = ImagePicker();    final pickedFile = await picker.pickImage(source: source);    print("pickedFile taken === ${File(pickedFile!.path)}");    if (pickedFile != null) {      setState(() {        _image = File(pickedFile.path);      });      //redirect to preview screen      //once you are get the image now this time to get 60 days from to day      print("image taken === ${File(pickedFile.path)}");    }  }  _addRestaturant()async{    setState(() => _isLoading = true);    int id = Random().nextInt(1000);    var imagePath;    //convert image    await ImageController.uploadImageToFirebaseStorage(_image!).then((value) => setState((){imagePath = value;})  );    print("image url: $imagePath");    //make a json object    var data = {      "id" : "$id",      "type": "restaurant",      "name": _name.text,      "email": _email.text,      "phone": _phone.text,      "password": _pass.text,      "location": restaurentLocation,      "image": imagePath,      "status": "Active",      "created_at": DateTime.now().toString(),    };    //send data to server    await FirebaseRestaurentController.addRestaurant(data, context);    setState(() => _isLoading = false);  }  _editRestaurent() async{    setState(() => _isLoading = true);    var imagePath;    //check if image is null    if(_image == null ){      //delete old image      setState(() {        imagePath = widget.restaurent!["image"];      });    }else{      //convert image      await ImageController.uploadImageToFirebaseStorage(_image!).then((value) => setState((){imagePath = value;})  );      print("image url: $imagePath");    }    //make a json object    var data = {      "id" : widget!.restaurent!.id,      "type": "restaurant",      "name": _name.text,      "email": _email.text,      "phone": _phone.text,      "password": _pass.text,      "location": restaurentLocation,      "image": imagePath,      "status": "Active",      "created_at": DateTime.now().toString(),    };    //send data to server    await FirebaseRestaurentController.updateRestaurant(data,  widget!.restaurent!.id, context);    setState(() => _isLoading = false);  }}