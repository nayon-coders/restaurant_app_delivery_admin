import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:driver/view/auth/forgot_password_success.dart';import 'package:driver/view/auth/login.dart';import 'package:driver/view/home/screens/home.dart';import 'package:driver/widgets/app_tost.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';class AuthController{  static final FirebaseAuth _auth = FirebaseAuth.instance;  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;  //signing with email  static Future<bool> signInWithEmailAndPassword({required BuildContext context, required String email, required String pass, required String token}) async {    try {      UserCredential userCredential = await _auth.signInWithEmailAndPassword(        email: email,        password: pass,      );      User? user = userCredential.user;      //check user role and navigate to respective screen      var users = await _firestore.collection("users").doc(user?.email).get();      //update user device token       print("user login");      if(users.data()!["role"] == "Admin"){        await _firestore.collection('users').doc(user?.email).set({...users.data()!, "token" : token}, SetOptions(merge: true)).then((value) {          Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>Home()), (route) => false);          AppToast.showToast("Login Success", Colors.green);        });      }else{        AppToast.showToast("You are not admin. Thanks.", Colors.red);      }      AppToast.showToast( "Login Success", Colors.green);      return true;    } on FirebaseAuthException catch (e) {      if(e.code == "firebase_auth/invalid-credential"){ // The supplied auth credential is incorrect        AppToast.showToast("The supplied auth credential is incorrect", Colors.red);      }      print('Error during email/password sign in: $e');      return false;      // Handle different Firebase Auth exceptions (e.g., invalid email, wrong password)    }  }  //signup  static Future<bool> signUp({required BuildContext context, required String email, required String pass,required String fullName,  required String gender}) async {    try {      Random rnd = new Random();      int id = rnd.nextInt(10);      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(        email: email.trim(),        password: pass.trim(),      );      User? user = userCredential.user;      var users = await _firestore.collection("users").doc(user?.email).get();      if(users.data()!["role"] == "Admin"){        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>Home()), (route) => false);        AppToast.showToast("Login Success", Colors.red);      }      // Update user profile in Firestore without a profile image      await _firestore.collection('users').doc(user?.uid).set({        "id": id.toString(),        'full_name': fullName.trim(),        'email': user!.email,        "profile" : null,        "gender" : gender,        "status" : "1"        // Add other profile information as needed      });      print('User signed up: ${user.uid}');      return true;    } on FirebaseAuthException catch (e) {      print('Error during signup: $e');      if(e.code == 'email-already-in-use'){      }      return false;      // Handle different Firebase Auth exceptions    }  }  //logout  static Future<void> signOut(context) async {    try {      await FirebaseAuth.instance.signOut().then((value) {        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)=>Login()), (route) => false);        AppToast.showToast("Sign out success", Colors.green);      });    } catch (e) {      print("Error signing out: $e");    }  }  static Future<void> deleteAccount(context) async {    try {      // Get the currently signed-in user      User? user = FirebaseAuth.instance.currentUser;      if (user != null) {        // Delete the user account        await user.delete();        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context)), (route) => false);        print("User account deleted successfully");      } else {        print("No user signed in");      }    } catch (e) {      print("Error deleting user account: $e");    }  }  static   Future<void> resetPassword({required String email, required BuildContext context}) async {    try {      await FirebaseAuth.instance.sendPasswordResetEmail(        email: email,      );      // Password reset email sent successfully      Navigator.push(context, MaterialPageRoute(builder: (context) => ForgotPasswordSuccess(email: email)));      AppToast.showToast("Password reset email sent successfully", Colors.green);      print("Password reset email sent successfully");      // You can navigate to a success screen or show a success message here    } catch (e) {      // An error occurred while sending the password reset email      print("Error sending password reset email: $e");      // You can display an error message to the user    }  }  //change email  static Future<bool> changeEmail ({required String email})async {    try {      User? user = FirebaseAuth.instance.currentUser;      if (user != null) {        await user.updateEmail(email);        return true;      }      return false;    }catch(e){      print("Error changing email: $e");      AppToast.showToast("Error changing email", Colors.red);      return false;    }  }  //change password  static Future<bool> changePassword ({required String pass, required BuildContext context})async {    try {      User? user = FirebaseAuth.instance.currentUser;      if (user != null) {        await user.updatePassword(pass);        signOut(context);        return true;      }      return false;    }catch(e){      print("Error changing password: $e");      AppToast.showToast("Error changing password", Colors.red);      return false;    }  }}